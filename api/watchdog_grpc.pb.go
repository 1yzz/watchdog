// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/watchdog.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WatchdogService_GetHealth_FullMethodName           = "/watchdog.WatchdogService/GetHealth"
	WatchdogService_RegisterService_FullMethodName     = "/watchdog.WatchdogService/RegisterService"
	WatchdogService_UnregisterService_FullMethodName   = "/watchdog.WatchdogService/UnregisterService"
	WatchdogService_ListServices_FullMethodName        = "/watchdog.WatchdogService/ListServices"
	WatchdogService_UpdateServiceStatus_FullMethodName = "/watchdog.WatchdogService/UpdateServiceStatus"
	WatchdogService_CheckServiceHealth_FullMethodName  = "/watchdog.WatchdogService/CheckServiceHealth"
)

// WatchdogServiceClient is the client API for WatchdogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchdogServiceClient interface {
	GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
	UnregisterService(ctx context.Context, in *UnregisterServiceRequest, opts ...grpc.CallOption) (*UnregisterServiceResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	UpdateServiceStatus(ctx context.Context, in *UpdateServiceStatusRequest, opts ...grpc.CallOption) (*UpdateServiceStatusResponse, error)
	CheckServiceHealth(ctx context.Context, in *CheckServiceHealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type watchdogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchdogServiceClient(cc grpc.ClientConnInterface) WatchdogServiceClient {
	return &watchdogServiceClient{cc}
}

func (c *watchdogServiceClient) GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, WatchdogService_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchdogServiceClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterServiceResponse)
	err := c.cc.Invoke(ctx, WatchdogService_RegisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchdogServiceClient) UnregisterService(ctx context.Context, in *UnregisterServiceRequest, opts ...grpc.CallOption) (*UnregisterServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterServiceResponse)
	err := c.cc.Invoke(ctx, WatchdogService_UnregisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchdogServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, WatchdogService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchdogServiceClient) UpdateServiceStatus(ctx context.Context, in *UpdateServiceStatusRequest, opts ...grpc.CallOption) (*UpdateServiceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServiceStatusResponse)
	err := c.cc.Invoke(ctx, WatchdogService_UpdateServiceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchdogServiceClient) CheckServiceHealth(ctx context.Context, in *CheckServiceHealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, WatchdogService_CheckServiceHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchdogServiceServer is the server API for WatchdogService service.
// All implementations must embed UnimplementedWatchdogServiceServer
// for forward compatibility.
type WatchdogServiceServer interface {
	GetHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
	UnregisterService(context.Context, *UnregisterServiceRequest) (*UnregisterServiceResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	UpdateServiceStatus(context.Context, *UpdateServiceStatusRequest) (*UpdateServiceStatusResponse, error)
	CheckServiceHealth(context.Context, *CheckServiceHealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedWatchdogServiceServer()
}

// UnimplementedWatchdogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWatchdogServiceServer struct{}

func (UnimplementedWatchdogServiceServer) GetHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedWatchdogServiceServer) RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedWatchdogServiceServer) UnregisterService(context.Context, *UnregisterServiceRequest) (*UnregisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterService not implemented")
}
func (UnimplementedWatchdogServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedWatchdogServiceServer) UpdateServiceStatus(context.Context, *UpdateServiceStatusRequest) (*UpdateServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceStatus not implemented")
}
func (UnimplementedWatchdogServiceServer) CheckServiceHealth(context.Context, *CheckServiceHealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckServiceHealth not implemented")
}
func (UnimplementedWatchdogServiceServer) mustEmbedUnimplementedWatchdogServiceServer() {}
func (UnimplementedWatchdogServiceServer) testEmbeddedByValue()                         {}

// UnsafeWatchdogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchdogServiceServer will
// result in compilation errors.
type UnsafeWatchdogServiceServer interface {
	mustEmbedUnimplementedWatchdogServiceServer()
}

func RegisterWatchdogServiceServer(s grpc.ServiceRegistrar, srv WatchdogServiceServer) {
	// If the following call pancis, it indicates UnimplementedWatchdogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WatchdogService_ServiceDesc, srv)
}

func _WatchdogService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchdogServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchdogService_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchdogServiceServer).GetHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchdogService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchdogServiceServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchdogService_RegisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchdogServiceServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchdogService_UnregisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchdogServiceServer).UnregisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchdogService_UnregisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchdogServiceServer).UnregisterService(ctx, req.(*UnregisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchdogService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchdogServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchdogService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchdogServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchdogService_UpdateServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchdogServiceServer).UpdateServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchdogService_UpdateServiceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchdogServiceServer).UpdateServiceStatus(ctx, req.(*UpdateServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchdogService_CheckServiceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckServiceHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchdogServiceServer).CheckServiceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WatchdogService_CheckServiceHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchdogServiceServer).CheckServiceHealth(ctx, req.(*CheckServiceHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchdogService_ServiceDesc is the grpc.ServiceDesc for WatchdogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchdogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "watchdog.WatchdogService",
	HandlerType: (*WatchdogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _WatchdogService_GetHealth_Handler,
		},
		{
			MethodName: "RegisterService",
			Handler:    _WatchdogService_RegisterService_Handler,
		},
		{
			MethodName: "UnregisterService",
			Handler:    _WatchdogService_UnregisterService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _WatchdogService_ListServices_Handler,
		},
		{
			MethodName: "UpdateServiceStatus",
			Handler:    _WatchdogService_UpdateServiceStatus_Handler,
		},
		{
			MethodName: "CheckServiceHealth",
			Handler:    _WatchdogService_CheckServiceHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/watchdog.proto",
}
