// Code generated by ent, DO NOT EDIT.

package service

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEndpoint holds the string denoting the endpoint field in the database.
	FieldEndpoint = "endpoint"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLastHeartbeat holds the string denoting the last_heartbeat field in the database.
	FieldLastHeartbeat = "last_heartbeat"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the service in the database.
	Table = "services"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEndpoint,
	FieldType,
	FieldStatus,
	FieldLastHeartbeat,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EndpointValidator is a validator for the "endpoint" field. It is called by the builders before save.
	EndpointValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DefaultLastHeartbeat holds the default value on creation for the "last_heartbeat" field.
	DefaultLastHeartbeat func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// Type defines the type for the "type" enum field.
type Type string

// TypeSERVICE_TYPE_UNSPECIFIED is the default value of the Type enum.
const DefaultType = TypeSERVICE_TYPE_UNSPECIFIED

// Type values.
const (
	TypeSERVICE_TYPE_UNSPECIFIED  Type = "SERVICE_TYPE_UNSPECIFIED"
	TypeSERVICE_TYPE_HTTP         Type = "SERVICE_TYPE_HTTP"
	TypeSERVICE_TYPE_GRPC         Type = "SERVICE_TYPE_GRPC"
	TypeSERVICE_TYPE_DATABASE     Type = "SERVICE_TYPE_DATABASE"
	TypeSERVICE_TYPE_CACHE        Type = "SERVICE_TYPE_CACHE"
	TypeSERVICE_TYPE_QUEUE        Type = "SERVICE_TYPE_QUEUE"
	TypeSERVICE_TYPE_STORAGE      Type = "SERVICE_TYPE_STORAGE"
	TypeSERVICE_TYPE_EXTERNAL_API Type = "SERVICE_TYPE_EXTERNAL_API"
	TypeSERVICE_TYPE_MICROSERVICE Type = "SERVICE_TYPE_MICROSERVICE"
	TypeSERVICE_TYPE_OTHER        Type = "SERVICE_TYPE_OTHER"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSERVICE_TYPE_UNSPECIFIED, TypeSERVICE_TYPE_HTTP, TypeSERVICE_TYPE_GRPC, TypeSERVICE_TYPE_DATABASE, TypeSERVICE_TYPE_CACHE, TypeSERVICE_TYPE_QUEUE, TypeSERVICE_TYPE_STORAGE, TypeSERVICE_TYPE_EXTERNAL_API, TypeSERVICE_TYPE_MICROSERVICE, TypeSERVICE_TYPE_OTHER:
		return nil
	default:
		return fmt.Errorf("service: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Service queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEndpoint orders the results by the endpoint field.
func ByEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndpoint, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLastHeartbeat orders the results by the last_heartbeat field.
func ByLastHeartbeat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastHeartbeat, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
