// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"watchdog/ent/predicate"
	"watchdog/ent/service"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (_u *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *ServiceUpdate) SetName(v string) *ServiceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ServiceUpdate) SetNillableName(v *string) *ServiceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEndpoint sets the "endpoint" field.
func (_u *ServiceUpdate) SetEndpoint(v string) *ServiceUpdate {
	_u.mutation.SetEndpoint(v)
	return _u
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (_u *ServiceUpdate) SetNillableEndpoint(v *string) *ServiceUpdate {
	if v != nil {
		_u.SetEndpoint(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ServiceUpdate) SetType(v service.Type) *ServiceUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ServiceUpdate) SetNillableType(v *service.Type) *ServiceUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ServiceUpdate) SetStatus(v string) *ServiceUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ServiceUpdate) SetNillableStatus(v *string) *ServiceUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (_u *ServiceUpdate) SetLastHeartbeat(v time.Time) *ServiceUpdate {
	_u.mutation.SetLastHeartbeat(v)
	return _u
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (_u *ServiceUpdate) SetNillableLastHeartbeat(v *time.Time) *ServiceUpdate {
	if v != nil {
		_u.SetLastHeartbeat(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ServiceUpdate) SetUpdatedAt(v time.Time) *ServiceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the ServiceMutation object of the builder.
func (_u *ServiceUpdate) Mutation() *ServiceMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ServiceUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ServiceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ServiceUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ServiceUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := service.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Service.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Endpoint(); ok {
		if err := service.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "Service.endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := service.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Service.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := service.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Service.status": %w`, err)}
		}
	}
	return nil
}

func (_u *ServiceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Endpoint(); ok {
		_spec.SetField(service.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(service.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(service.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastHeartbeat(); ok {
		_spec.SetField(service.FieldLastHeartbeat, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(service.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetName sets the "name" field.
func (_u *ServiceUpdateOne) SetName(v string) *ServiceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ServiceUpdateOne) SetNillableName(v *string) *ServiceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEndpoint sets the "endpoint" field.
func (_u *ServiceUpdateOne) SetEndpoint(v string) *ServiceUpdateOne {
	_u.mutation.SetEndpoint(v)
	return _u
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (_u *ServiceUpdateOne) SetNillableEndpoint(v *string) *ServiceUpdateOne {
	if v != nil {
		_u.SetEndpoint(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ServiceUpdateOne) SetType(v service.Type) *ServiceUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ServiceUpdateOne) SetNillableType(v *service.Type) *ServiceUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ServiceUpdateOne) SetStatus(v string) *ServiceUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ServiceUpdateOne) SetNillableStatus(v *string) *ServiceUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetLastHeartbeat sets the "last_heartbeat" field.
func (_u *ServiceUpdateOne) SetLastHeartbeat(v time.Time) *ServiceUpdateOne {
	_u.mutation.SetLastHeartbeat(v)
	return _u
}

// SetNillableLastHeartbeat sets the "last_heartbeat" field if the given value is not nil.
func (_u *ServiceUpdateOne) SetNillableLastHeartbeat(v *time.Time) *ServiceUpdateOne {
	if v != nil {
		_u.SetLastHeartbeat(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ServiceUpdateOne) SetUpdatedAt(v time.Time) *ServiceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the ServiceMutation object of the builder.
func (_u *ServiceUpdateOne) Mutation() *ServiceMutation {
	return _u.mutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (_u *ServiceUpdateOne) Where(ps ...predicate.Service) *ServiceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Service entity.
func (_u *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ServiceUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ServiceUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := service.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Service.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Endpoint(); ok {
		if err := service.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`ent: validator failed for field "Service.endpoint": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := service.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Service.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := service.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Service.status": %w`, err)}
		}
	}
	return nil
}

func (_u *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Endpoint(); ok {
		_spec.SetField(service.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(service.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(service.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastHeartbeat(); ok {
		_spec.SetField(service.FieldLastHeartbeat, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(service.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Service{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
