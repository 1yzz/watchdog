// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"watchdog/ent/schema"
	"watchdog/ent/service"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	serviceFields := schema.Service{}.Fields()
	_ = serviceFields
	// serviceDescName is the schema descriptor for name field.
	serviceDescName := serviceFields[1].Descriptor()
	// service.NameValidator is a validator for the "name" field. It is called by the builders before save.
	service.NameValidator = func() func(string) error {
		validators := serviceDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// serviceDescEndpoint is the schema descriptor for endpoint field.
	serviceDescEndpoint := serviceFields[2].Descriptor()
	// service.EndpointValidator is a validator for the "endpoint" field. It is called by the builders before save.
	service.EndpointValidator = func() func(string) error {
		validators := serviceDescEndpoint.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(endpoint string) error {
			for _, fn := range fns {
				if err := fn(endpoint); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// serviceDescStatus is the schema descriptor for status field.
	serviceDescStatus := serviceFields[4].Descriptor()
	// service.DefaultStatus holds the default value on creation for the status field.
	service.DefaultStatus = serviceDescStatus.Default.(string)
	// service.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	service.StatusValidator = serviceDescStatus.Validators[0].(func(string) error)
	// serviceDescLastHeartbeat is the schema descriptor for last_heartbeat field.
	serviceDescLastHeartbeat := serviceFields[5].Descriptor()
	// service.DefaultLastHeartbeat holds the default value on creation for the last_heartbeat field.
	service.DefaultLastHeartbeat = serviceDescLastHeartbeat.Default.(func() time.Time)
	// serviceDescCreatedAt is the schema descriptor for created_at field.
	serviceDescCreatedAt := serviceFields[6].Descriptor()
	// service.DefaultCreatedAt holds the default value on creation for the created_at field.
	service.DefaultCreatedAt = serviceDescCreatedAt.Default.(func() time.Time)
	// serviceDescUpdatedAt is the schema descriptor for updated_at field.
	serviceDescUpdatedAt := serviceFields[7].Descriptor()
	// service.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	service.DefaultUpdatedAt = serviceDescUpdatedAt.Default.(func() time.Time)
	// service.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	service.UpdateDefaultUpdatedAt = serviceDescUpdatedAt.UpdateDefault.(func() time.Time)
	// serviceDescID is the schema descriptor for id field.
	serviceDescID := serviceFields[0].Descriptor()
	// service.IDValidator is a validator for the "id" field. It is called by the builders before save.
	service.IDValidator = serviceDescID.Validators[0].(func(int64) error)
}
